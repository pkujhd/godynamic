package godynamic

import (
	"unsafe"
)

var firstmoduledatap *moduledata = nil
var lastmoduledatap *moduledata = nil
var lastmoduledatapp **moduledata = nil

//go:linkname moduledataverify1 runtime.moduledataverify1
func moduledataverify1(datap *moduledata)

//go:linkname modulesinit runtime.modulesinit
func modulesinit()

//go:linkname typelinksinit runtime.typelinksinit
func typelinksinit()

//go:linkname activeModules runtime.activeModules
func activeModules() []*moduledata

//go:linkname resolveNameOff runtime.resolveNameOff
func resolveNameOff(ptrInModule unsafe.Pointer, off nameOff) name

type functab struct {
	entry   uintptr
	funcoff uintptr
}

// Mapping information for secondary text sections
type textsect struct {
	vaddr    uintptr // prelinked section vaddr
	length   uintptr // section length
	baseaddr uintptr // relocated section address
}

type nameOff int32
type typeOff int32
type textOff int32

// A ptabEntry is generated by the compiler for each exported function
// and global variable in the main package of a plugin. It is used to
// initialize the plugin module's symbol map.
type ptabEntry struct {
	name nameOff
	typ  typeOff
}

type modulehash struct {
	modulename   string
	linktimehash string
	runtimehash  *string
}

type bitvector struct {
	n        int32 // # of bits
	bytedata *uint8
}

func removeModule(module *moduledata) {
	var prevp *moduledata = firstmoduledatap
	for md := firstmoduledatap; md != nil; md = md.next {
		if md == module {
			break
		}
		prevp = md
	}
	if prevp != nil {
		prevp.next = module.next
	}
	*lastmoduledatapp = lastmoduledatap
}
